from dotenv import load_dotenv ## This line imports the load_dotenv function from the dotenv library.
load_dotenv() ## function calls & loading all the environment variables,These variables can store sensitive information like API keys that you don't want to commit to your code

import streamlit as st ##  Streamlit is a Python framework used to create interactive web applications.
import os
import google.generativeai as genai 

genai.configure(api_key=os.getenv("GOOGLE_API_KEY")) ## This line configures the genai library to use the Google API key stored in an environment variable named GOOGLE_API_KEY. The os.getenv("GOOGLE_API_KEY") part retrieves the value of that environment variable

## functions to load Gemini pro model and get responses
model=genai.GenerativeModel("gemini-pro") ## This line creates a GenerativeModel object from the genai library, specifying the model name as "gemini-pro". 
def get_gemini_response(question): ## This line defines a function named get_gemini_response that takes a single argument, question.
    response=model.generate_content(question) ## Inside the function, this line calls the generate_content method on the model object, passing the question as an argument. This method likely interacts with the Gemini Pro model to generate a response based on the input question.
    return response.text ## the function returns the text portion of the generated response object.

##initialize our streamlit app

st.set_page_config(page_title="Q&A Demo") ## This line sets the title of the Streamlit application to "Q&A Demo" using the st.set_page_config function

st.header("Gemini LLM Application") ## This line creates a heading in the Streamlit app with the text "Gemini LLM Application" using the st.header function.

input=st.text_input("Input: ",key="input") ## This line creates a text input field in the Streamlit app using the st.text_input function. The prompt text displayed next to the input field is "Input: ". The key="input" attribute assigns a unique identifier to this element, which can be helpful for managing state in Streamlit apps.
submit=st.button("Ask the question")## This line creates a button in the Streamlit app using the st.button function. The text displayed on the button is "Ask the question".

## When submit is clicked

if submit:
    response=get_gemini_response(input) ## If the button has been clicked (i.e., submit is True), this line calls the get_gemini_response function, passing the user's input from the text input field as the argument (input).
    st.subheader("The Response is") # This line creates a subheading in the Streamlit app with the text "The Response is" using the st.subheader function.
    st.write(response) # This line displays the response generated by the get_gemini_response function (which is the Gemini Pro model's response to the user's question